<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentAssertions.NodaTime</name>
    </assembly>
    <members>
        <member name="T:FluentAssertions.NodaTime.AssertionExtensions">
            <summary>
                Constains extension methods for NodaTime.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Instant)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.InstantAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Instant" />.
            </summary>
            <param name="instant">The <see cref="T:NodaTime.Instant" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.InstantAssertions" /> to use for asserting an <see cref="T:NodaTime.Instant" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Instant})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.InstantAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Instant" />.
            </summary>
            <param name="instant">The <see cref="T:NodaTime.Instant" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.InstantAssertions" /> to use for asserting an <see cref="T:NodaTime.Instant" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Offset)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">The <see cref="T:NodaTime.Offset" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" /> to use for asserting an <see cref="T:NodaTime.Offset" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Offset})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">The <see cref="T:NodaTime.Offset" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" /> to use for asserting an <see cref="T:NodaTime.Offset" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.LocalDateTime})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions"/> object that can be used to assert an <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">The <see cref="T:NodaTime.LocalDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" /> to use for asserting an <see cref="T:NodaTime.LocalDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.LocalDateTime)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions"/> object that can be used to assert an <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">The <see cref="T:NodaTime.LocalDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" /> to use for asserting an <see cref="T:NodaTime.LocalDateTime" />.</returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.InstantAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Instant" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.#ctor(System.Nullable{NodaTime.Instant})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.InstantAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Instant" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.InstantAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.Be(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.Be(System.Nullable{System.DateTimeOffset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBe(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBe(System.Nullable{System.DateTimeOffset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeCloseTo(NodaTime.Instant,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeCloseTo(NodaTime.Instant,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBeCloseTo(NodaTime.Instant,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBeCloseTo(NodaTime.Instant,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeAfter(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeOnOrAfter(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeBefore(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is before <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeOnOrBefore(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is on or before <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.LocalDateTimeAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.#ctor(System.Nullable{NodaTime.LocalDateTime})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.LocalDateTime" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.LocalDateTimeAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateTimeAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
            <returns></returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.LocalDateTimeConstraint">
            <summary>
                Constraint that is returned from assertions for <see cref="T:NodaTime.LocalDateTime" /> and which allows for further
                matches on the <see cref="T:NodaTime.LocalDate" /> and <see cref="T:NodaTime.LocalTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeConstraint.#ctor(FluentAssertions.NodaTime.LocalDateTimeAssertions,NodaTime.LocalDateTime)">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.LocalDateTimeConstraint" />.
            </summary>
            <param name="parentConstraint">The parent constraint.</param>
            <param name="matchedConstraint">The matched constraint.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.LocalDateTimeConstraint.WhichDate">
            <summary>
                Gets the <see cref="T:NodaTime.LocalDate" /> of the <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
        </member>
        <member name="P:FluentAssertions.NodaTime.LocalDateTimeConstraint.WhichTime">
            <summary>
                Gets the <see cref="T:NodaTime.LocalTime" /> of the <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
        </member>
        <member name="T:FluentAssertions.NodaTime.OffsetAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Offset" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.#ctor(System.Nullable{NodaTime.Offset})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Offset" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.OffsetAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.Be(System.Nullable{NodaTime.Offset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.Be(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBe(System.Nullable{NodaTime.Offset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBe(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BePositive(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is positive.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeNegative(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is negative.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeCloseTo(NodaTime.Offset,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeCloseTo(NodaTime.Offset,NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeCloseTo(NodaTime.Offset,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeCloseTo(NodaTime.Offset,NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeGreaterThan(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeGreaterThanOrEqualTo(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeLessThan(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeLessThanOrEqualTo(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
    </members>
</doc>
