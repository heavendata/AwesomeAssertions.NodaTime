<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentAssertions.NodaTime</name>
    </assembly>
    <members>
        <member name="T:FluentAssertions.NodaTime.AssertionExtensions">
            <summary>
                Constains extension methods for NodaTime.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Instant)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.InstantAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Instant" />.
            </summary>
            <param name="instant">The <see cref="T:NodaTime.Instant" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.InstantAssertions" /> to use for asserting an <see cref="T:NodaTime.Instant" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Instant})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.InstantAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Instant" />.
            </summary>
            <param name="instant">The <see cref="T:NodaTime.Instant" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.InstantAssertions" /> to use for asserting an <see cref="T:NodaTime.Instant" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Offset)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">The <see cref="T:NodaTime.Offset" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" /> to use for asserting an <see cref="T:NodaTime.Offset" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Offset})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">The <see cref="T:NodaTime.Offset" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" /> to use for asserting an <see cref="T:NodaTime.Offset" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.LocalDateTime})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions"/> object that can be used to assert an <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">The <see cref="T:NodaTime.LocalDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" /> to use for asserting an <see cref="T:NodaTime.LocalDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.LocalDateTime)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions"/> object that can be used to assert an <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">The <see cref="T:NodaTime.LocalDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" /> to use for asserting an <see cref="T:NodaTime.LocalDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Duration})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.DurationAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Duration" />.
            </summary>
            <param name="duration">The <see cref="T:NodaTime.Duration" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.DurationAssertions" /> to use for asserting an <see cref="T:NodaTime.Duration" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Duration)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.DurationAssertions"/> object that can be used to assert an <see cref="T:NodaTime.Duration" />.
            </summary>
            <param name="duration">The <see cref="T:NodaTime.Duration" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.DurationAssertions" /> to use for asserting an <see cref="T:NodaTime.Duration" />.</returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.DurationAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Duration" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.#ctor(System.Nullable{NodaTime.Duration})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.DurationAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Duration" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.DurationAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.Be(System.Nullable{NodaTime.Duration},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.Be(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBe(System.Nullable{NodaTime.Duration},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBe(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BePositive(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is positive.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeNegative(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is negative.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeCloseTo(NodaTime.Duration,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeCloseTo(NodaTime.Duration,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBeCloseTo(NodaTime.Duration,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBeCloseTo(NodaTime.Duration,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeGreaterThan(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeGreaterThanOrEqualTo(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeLessThan(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeLessThanOrEqualTo(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified days.
            </summary>
            <param name="days">
                The days that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified days.
            </summary>
            <param name="days">
                The days that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalDays(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalDays(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalDays(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalDays(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMilliseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMilliseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMilliseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMilliseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMinutes(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMinutes(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMinutes(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMinutes(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalNanoseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalNanoseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalNanoseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalNanoseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalSeconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalSeconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalSeconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalSeconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalTicks(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalTicks(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalTicks(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalTicks(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveMinutes(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified minutes.
            </summary>
            <param name="minutes">
                The minutes that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveMinutes(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified minutes.
            </summary>
            <param name="minutes">
                The minutes that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveNanosecondOfDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified nanosecond of day.
            </summary>
            <param name="nanosecondOfDay">
                The nanosecond of day that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveNanosecondOfDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified nanosecond of day.
            </summary>
            <param name="nanosecondOfDay">
                The nanosecond of day that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveSubsecondInNanoseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified subseconds in nanoseconds.
            </summary>
            <param name="nanoseconds">
                The subseconds in nanoseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveSubsecondInNanoseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified subseconds in nanoseconds.
            </summary>
            <param name="nanoseconds">
                The subseconds in nanoseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveSubsecondInTicks(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified subseconds in ticks.
            </summary>
            <param name="ticks">
                The subseconds in ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveSubsecondInTicks(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified subseconds in ticks.
            </summary>
            <param name="ticks">
                The subseconds in ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.InstantAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Instant" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.#ctor(System.Nullable{NodaTime.Instant})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.InstantAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Instant" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.InstantAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.Be(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.Be(System.Nullable{System.DateTimeOffset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBe(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBe(System.Nullable{System.DateTimeOffset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeCloseTo(NodaTime.Instant,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeCloseTo(NodaTime.Instant,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBeCloseTo(NodaTime.Instant,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBeCloseTo(NodaTime.Instant,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeAfter(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeOnOrAfter(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeBefore(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is before <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeOnOrBefore(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is on or before <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.LocalDateTimeAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.#ctor(System.Nullable{NodaTime.LocalDateTime})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.LocalDateTime" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.LocalDateTimeAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.Be(System.Nullable{NodaTime.LocalDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotBe(System.Nullable{NodaTime.LocalDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.BeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateTimeAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotBeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateTimeAssertions, LocalDate&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.LocalDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateTimeAssertions, LocalTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.LocalTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveNanosecondOfDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified nanosecond of day.
            </summary>
            <param name="nanosecondOfDay">
                The nanosecond of day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveNanosecondOfDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified nanosecond of day.
            </summary>
            <param name="nanosecondOfDay">
                The nanosecond of day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveNanosecondOfSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified nanosecond of second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanosecond of second that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveNanosecondOfSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified nanosecond of second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanosecond of second that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveTickOfSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveTickOfSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveTickOfDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveTickOfDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveYearOfEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveYearOfEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.OffsetAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Offset" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.#ctor(System.Nullable{NodaTime.Offset})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Offset" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.OffsetAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.Be(System.Nullable{NodaTime.Offset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.Be(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBe(System.Nullable{NodaTime.Offset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBe(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BePositive(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is positive.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeNegative(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is negative.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeCloseTo(NodaTime.Offset,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeCloseTo(NodaTime.Offset,NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeCloseTo(NodaTime.Offset,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeCloseTo(NodaTime.Offset,NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeGreaterThan(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeGreaterThanOrEqualTo(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeLessThan(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeLessThanOrEqualTo(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveNanoseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified nanoseconds.
            </summary>
            <param name="nanoseconds">
                The nanoseconds that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveNanoseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified nanoseconds.
            </summary>
            <param name="nanoseconds">
                The nanoseconds that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
    </members>
</doc>
