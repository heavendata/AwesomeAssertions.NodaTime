<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentAssertions.NodaTime</name>
    </assembly>
    <members>
        <member name="T:FluentAssertions.NodaTime.AnnualDateAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.AnnualDate" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.#ctor(System.Nullable{NodaTime.AnnualDate})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.AnnualDateAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.AnnualDate" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.AnnualDateAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.Be(System.Nullable{NodaTime.AnnualDate},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.AnnualDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.NotBe(System.Nullable{NodaTime.AnnualDate},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.AnnualDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.BeGreaterThan(NodaTime.AnnualDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.AnnualDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.BeGreaterThanOrEqualTo(NodaTime.AnnualDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is greater than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.AnnualDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.BeLessThan(NodaTime.AnnualDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.AnnualDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.BeLessThanOrEqualTo(NodaTime.AnnualDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.AnnualDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.BeValidInYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is a valid day and month for the specified <paramref name="year" />.
            </summary>
            <param name="year">The year to check.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.NotBeValidInYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.AnnualDate" /> is not a valid day and month for the specified <paramref name="year" />.
            </summary>
            <param name="year">The year to check.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.AnnualDate" /> has the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.AnnualDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.NotHaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.AnnualDate" /> does not have the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.AnnualDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.AnnualDate" /> has the specified month of the year.
            </summary>
            <param name="month">
                The month of the year that the current <see cref="T:NodaTime.AnnualDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AnnualDateAssertions.NotHaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.AnnualDate" /> does not have the specified month of the year.
            </summary>
            <param name="month">
                The month of the year that the current <see cref="T:NodaTime.AnnualDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;AnnualDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.AssertionExtensions">
            <summary>
                Constains extension methods for NodaTime.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Instant)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.InstantAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Instant" />.
            </summary>
            <param name="instant">The <see cref="T:NodaTime.Instant" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.InstantAssertions" /> to use for asserting a <see cref="T:NodaTime.Instant" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Instant})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.InstantAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Instant" />.
            </summary>
            <param name="instant">The <see cref="T:NodaTime.Instant" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.InstantAssertions" /> to use for asserting a <see cref="T:NodaTime.Instant" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.AnnualDate)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.AnnualDateAssertions"/> object that can be used to assert a <see cref="T:NodaTime.AnnualDate" />.
            </summary>
            <param name="annualDate">The <see cref="T:NodaTime.AnnualDate" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.AnnualDateAssertions" /> to use for asserting a <see cref="T:NodaTime.AnnualDate" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.AnnualDate})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.AnnualDateAssertions"/> object that can be used to assert a <see cref="T:NodaTime.AnnualDate" />.
            </summary>
            <param name="annualDate">The <see cref="T:NodaTime.AnnualDate" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.AnnualDateAssertions" /> to use for asserting a <see cref="T:NodaTime.AnnualDate" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Interval)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.IntervalAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Interval" />.
            </summary>
            <param name="interval">The <see cref="T:NodaTime.Interval" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.IntervalAssertions" /> to use for asserting a <see cref="T:NodaTime.Interval" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Interval})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.IntervalAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Interval" />.
            </summary>
            <param name="interval">The <see cref="T:NodaTime.Interval" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.IntervalAssertions" /> to use for asserting a <see cref="T:NodaTime.Interval" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.DateInterval)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.DateIntervalAssertions"/> object that can be used to assert a <see cref="T:NodaTime.DateInterval" />.
            </summary>
            <param name="interval">The <see cref="T:NodaTime.DateInterval" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.DateIntervalAssertions" /> to use for asserting a <see cref="T:NodaTime.DateInterval" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Offset)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.OffsetAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">The <see cref="T:NodaTime.Offset" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" /> to use for asserting a <see cref="T:NodaTime.Offset" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Offset})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">The <see cref="T:NodaTime.Offset" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" /> to use for asserting a <see cref="T:NodaTime.Offset" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.LocalDateTime})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">The <see cref="T:NodaTime.LocalDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.LocalDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.LocalDateTime)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">The <see cref="T:NodaTime.LocalDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.LocalDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.LocalDate})">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.LocalDateAssertions"/> object that can be used to assert a <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="localDate">The <see cref="T:NodaTime.LocalDate" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateAssertions" /> to use for asserting a <see cref="T:NodaTime.LocalDate" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.LocalDate)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.LocalDateAssertions"/> object that can be used to assert a <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="localDate">The <see cref="T:NodaTime.LocalDate" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalDateAssertions" /> to use for asserting a <see cref="T:NodaTime.LocalDate" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.LocalTime})">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.LocalTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="localTime">The <see cref="T:NodaTime.LocalTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.LocalTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.LocalTime)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.LocalTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="localTime">The <see cref="T:NodaTime.LocalTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.LocalTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.LocalTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.OffsetDateTime})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetDateTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.OffsetDateTime" />.
            </summary>
            <param name="offsetDateTime">The <see cref="T:NodaTime.OffsetDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetDateTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.OffsetDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.OffsetDateTime)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetDateTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.OffsetDateTime" />.
            </summary>
            <param name="offsetDateTime">The <see cref="T:NodaTime.OffsetDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetDateTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.OffsetDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.OffsetDate})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetDateAssertions"/> object that can be used to assert a <see cref="T:NodaTime.OffsetDate" />.
            </summary>
            <param name="offsetDate">The <see cref="T:NodaTime.OffsetDate" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetDateAssertions" /> to use for asserting a <see cref="T:NodaTime.OffsetDate" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.OffsetDate)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetDateAssertions"/> object that can be used to assert a <see cref="T:NodaTime.OffsetDate" />.
            </summary>
            <param name="offsetDate">The <see cref="T:NodaTime.OffsetDate" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetDateAssertions" /> to use for asserting a <see cref="T:NodaTime.OffsetDate" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.OffsetTime})">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.OffsetTime" />.
            </summary>
            <param name="offsetTime">The <see cref="T:NodaTime.OffsetTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.OffsetTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.OffsetTime)">
            <summary>
                Returns an <see cref="T:FluentAssertions.NodaTime.OffsetTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.OffsetTime" />.
            </summary>
            <param name="offsetTime">The <see cref="T:NodaTime.OffsetTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.OffsetTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.OffsetTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.ZonedDateTime})">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.ZonedDateTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.ZonedDateTime" />.
            </summary>
            <param name="zonedDateTime">The <see cref="T:NodaTime.ZonedDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.ZonedDateTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.ZonedDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.ZonedDateTime)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.ZonedDateTimeAssertions"/> object that can be used to assert a <see cref="T:NodaTime.ZonedDateTime" />.
            </summary>
            <param name="zonedDateTime">The <see cref="T:NodaTime.ZonedDateTime" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.ZonedDateTimeAssertions" /> to use for asserting a <see cref="T:NodaTime.ZonedDateTime" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(System.Nullable{NodaTime.Duration})">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.DurationAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Duration" />.
            </summary>
            <param name="duration">The <see cref="T:NodaTime.Duration" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.DurationAssertions" /> to use for asserting a <see cref="T:NodaTime.Duration" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Duration)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.DurationAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Duration" />.
            </summary>
            <param name="duration">The <see cref="T:NodaTime.Duration" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.DurationAssertions" /> to use for asserting a <see cref="T:NodaTime.Duration" />.</returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.AssertionExtensions.Should(NodaTime.Period)">
            <summary>
                Returns a <see cref="T:FluentAssertions.NodaTime.PeriodAssertions"/> object that can be used to assert a <see cref="T:NodaTime.Period" />.
            </summary>
            <param name="period">The <see cref="T:NodaTime.Period" /> to assert.</param>
            <returns>The <see cref="T:FluentAssertions.NodaTime.PeriodAssertions" /> to use for asserting a <see cref="T:NodaTime.Period" />.</returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.DateIntervalAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.DateInterval" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.#ctor(NodaTime.DateInterval)">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.DateIntervalAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.DateInterval" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.DateIntervalAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.Be(NodaTime.DateInterval,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.DateInterval" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.DateInterval" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.NotBe(NodaTime.DateInterval,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.DateInterval" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.DateInterval" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.BeInDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the length of this <see cref="T:NodaTime.DateInterval" /> is equal to <paramref name="days" /> days.
            </summary>
            <param name="days">The length of this date interval in days..</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.NotBeInDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the length of this <see cref="T:NodaTime.DateInterval" /> is not equal to <paramref name="days" /> days.
            </summary>
            <param name="days">The length of this date interval in days..</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.EndAt(System.Nullable{NodaTime.LocalDate},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> ends at <paramref name="localDate" />.
            </summary>
            <param name="localDate">The exclusive upper bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.NotEndAt(System.Nullable{NodaTime.LocalDate},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> does not end at <paramref name="localDate" />.
            </summary>
            <param name="localDate">The exclusive upper bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.StartAt(System.Nullable{NodaTime.LocalDate},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> starts at <paramref name="localDate" />.
            </summary>
            <param name="localDate">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepstarted automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.NotStartAt(System.Nullable{NodaTime.LocalDate},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> does not start at <paramref name="localDate" />.
            </summary>
            <param name="localDate">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepstarted automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.Contain(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> contains <paramref name="localDate" />.
            </summary>
            <param name="localDate">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not contain with the word <i>because</i>, it is prepcontained automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.NotContain(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> does not contain <paramref name="localDate" />.
            </summary>
            <param name="localDate">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not contain with the word <i>because</i>, it is prepcontained automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.Contain(NodaTime.DateInterval,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> contains <paramref name="dateInterval" />.
            </summary>
            <param name="dateInterval">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not contain with the word <i>because</i>, it is prepcontained automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.NotContain(NodaTime.DateInterval,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> does not contain <paramref name="dateInterval" />.
            </summary>
            <param name="dateInterval">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not contain with the word <i>because</i>, it is prepcontained automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.BeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.DateInterval" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;DateIntervalAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DateIntervalAssertions.NotBeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.DateInterval" /> does not have the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.DateInterval" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DateIntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.DurationAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Duration" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.#ctor(System.Nullable{NodaTime.Duration})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.DurationAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Duration" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.DurationAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.Be(System.Nullable{NodaTime.Duration},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.Be(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:System.TimeSpan" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBe(System.Nullable{NodaTime.Duration},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBe(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BePositive(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is positive.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeNegative(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is negative.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeCloseTo(NodaTime.Duration,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeCloseTo(NodaTime.Duration,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBeCloseTo(NodaTime.Duration,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotBeCloseTo(NodaTime.Duration,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeGreaterThan(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeGreaterThanOrEqualTo(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is greater than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeLessThan(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.BeLessThanOrEqualTo(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Duration" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified days.
            </summary>
            <param name="days">
                The days that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified days.
            </summary>
            <param name="days">
                The days that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveHours(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified hours.
            </summary>
            <param name="hours">
                The hours that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveHours(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified hours.
            </summary>
            <param name="hours">
                The hours that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalDays(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalDays(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalDays(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalDays(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of days.
            </summary>
            <param name="totalDays">
                The total number of days that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalHours(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of hours.
            </summary>
            <param name="totalHours">
                The total number of hours that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalHours(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of hours.
            </summary>
            <param name="totalHours">
                The total number of hours that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalHours(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of hours.
            </summary>
            <param name="totalHours">
                The total number of hours that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalHours(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of hours.
            </summary>
            <param name="totalHours">
                The total number of hours that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMilliseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMilliseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMilliseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMilliseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of milliseconds.
            </summary>
            <param name="totalMilliseconds">
                The total number of milliseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMinutes(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalMinutes(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMinutes(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalMinutes(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of minutes.
            </summary>
            <param name="totalMinutes">
                The total number of minutes that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalNanoseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalNanoseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalNanoseconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalNanoseconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of nanoseconds.
            </summary>
            <param name="totalNanoseconds">
                The total number of nanoseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalSeconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalSeconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalSeconds(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalSeconds(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of seconds.
            </summary>
            <param name="totalSeconds">
                The total number of seconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalTicks(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTotalTicks(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalTicks(System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTotalTicks(System.Double,System.Double,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified total number of ticks.
            </summary>
            <param name="totalTicks">
                The total number of ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="precision">The maximum amount of which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveMinutes(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified minutes.
            </summary>
            <param name="minutes">
                The minutes that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveMinutes(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified minutes.
            </summary>
            <param name="minutes">
                The minutes that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveSubsecondInNanoseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified subseconds in nanoseconds.
            </summary>
            <param name="nanoseconds">
                The subseconds in nanoseconds that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveSubsecondInNanoseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified subseconds in nanoseconds.
            </summary>
            <param name="nanoseconds">
                The subseconds in nanoseconds that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveSubsecondInTicks(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified subseconds in ticks.
            </summary>
            <param name="ticks">
                The subseconds in ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveSubsecondInTicks(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified subseconds in ticks.
            </summary>
            <param name="ticks">
                The subseconds in ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.HaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> has the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Duration" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.DurationAssertions.NotHaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Duration" /> does not have the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Duration" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;DurationAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.Formatters.DateIntervalValueFormatter">
            <summary>
                Formats a <see cref="T:NodaTime.DateInterval" /> into a human-readable string representation.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.Formatters.DateIntervalValueFormatter.CanHandle(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.Formatters.DateIntervalValueFormatter.Format(System.Object,FluentAssertions.Formatting.FormattedObjectGraph,FluentAssertions.Formatting.FormattingContext,FluentAssertions.Formatting.FormatChild)">
            <inheritdoc />
        </member>
        <member name="T:FluentAssertions.NodaTime.InstantAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Instant" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.#ctor(System.Nullable{NodaTime.Instant})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.InstantAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Instant" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.InstantAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.Be(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.Be(System.Nullable{System.DateTimeOffset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is equal to <paramref name="dateTimeOffset" />.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.Be(System.Nullable{System.DateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is equal to <paramref name="dateTimeUtc" />.
            </summary>
            <param name="dateTimeUtc">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBe(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBe(System.Nullable{System.DateTimeOffset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not equal to <paramref name="dateTimeOffset" />.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBe(System.Nullable{System.DateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not equal to <paramref name="dateTimeUtc" />.
            </summary>
            <param name="dateTimeUtc">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeCloseTo(NodaTime.Instant,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeCloseTo(NodaTime.Instant,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBeCloseTo(NodaTime.Instant,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.NotBeCloseTo(NodaTime.Instant,NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeGreaterThan(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeGreaterThanOrEqualTo(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is greater than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeLessThan(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.InstantAssertions.BeLessThanOrEqualTo(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Instant" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Instant" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;InstantAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.IntervalAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Interval" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.#ctor(System.Nullable{NodaTime.Interval})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.IntervalAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Interval" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.IntervalAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.Be(System.Nullable{NodaTime.Interval},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Interval" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Interval" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.NotBe(System.Nullable{NodaTime.Interval},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Interval" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Interval" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.HaveDuration(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> has the specified duration.
            </summary>
            <param name="duration">
                The duration that the current <see cref="T:NodaTime.Interval" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.NotHaveDuration(NodaTime.Duration,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> has the specified duration.
            </summary>
            <param name="duration">
                The duration that the current <see cref="T:NodaTime.Interval" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.End(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> has a fixed end point.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.NotEnd(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> does not have a fixed end point.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.EndAt(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> ends at <paramref name="instant" />.
            </summary>
            <param name="instant">The exclusive upper bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.NotEndAt(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> does not end at <paramref name="instant" />.
            </summary>
            <param name="instant">The exclusive upper bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.Start(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> has a fixed start point.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepstarted automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.NotStart(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> does not have a fixed start point.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepstarted automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.StartAt(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> starts at <paramref name="instant" />.
            </summary>
            <param name="instant">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepstarted automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.NotStartAt(System.Nullable{NodaTime.Instant},System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> does not start at <paramref name="instant" />.
            </summary>
            <param name="instant">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepstarted automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.Contain(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> contains <paramref name="instant" />.
            </summary>
            <param name="instant">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not contain with the word <i>because</i>, it is prepcontained automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.IntervalAssertions.NotContain(NodaTime.Instant,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Interval" /> does not contain <paramref name="instant" />.
            </summary>
            <param name="instant">The inclusive lower bound of the interval.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not contain with the word <i>because</i>, it is prepcontained automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;IntervalAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.LocalDateAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.LocalDate" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.#ctor(System.Nullable{NodaTime.LocalDate})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.LocalDateAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.LocalDate" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.LocalDateAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.Be(System.Nullable{NodaTime.LocalDate},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.Be(System.Nullable{System.DateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is equal to <paramref name="dateTime" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.Be(System.Nullable{System.DateTime},NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is equal to <paramref name="dateTime" /> in <paramref name="calendar" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="calendar">The <see cref="T:NodaTime.CalendarSystem" /> to convert <paramref name="dateTime" /> to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotBe(System.Nullable{NodaTime.LocalDate},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotBe(System.Nullable{System.DateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is not equal to <paramref name="dateTime" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotBe(System.Nullable{System.DateTime},NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is not equal to <paramref name="dateTime" /> in <paramref name="calendar" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="calendar">The <see cref="T:NodaTime.CalendarSystem" /> to convert <paramref name="dateTime" /> to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.BeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotBeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotHaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.HaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotHaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.HaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotHaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.HaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotHaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotHaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.HaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotHaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.HaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> has the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.LocalDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.NotHaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDate" /> does not have the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.LocalDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.BeGreaterThan(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.BeGreaterThanOrEqualTo(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.BeLessThan(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateAssertions.BeLessThanOrEqualTo(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDate" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.LocalDateTimeAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.#ctor(System.Nullable{NodaTime.LocalDateTime})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.LocalDateTimeAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.LocalDateTime" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.LocalDateTimeAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.Be(System.Nullable{NodaTime.LocalDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.Be(System.Nullable{System.DateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is equal to <paramref name="dateTime" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.Be(System.Nullable{System.DateTime},NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is equal to <paramref name="dateTime" /> in <paramref name="calendar" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="calendar">The <see cref="T:NodaTime.CalendarSystem" /> to convert <paramref name="dateTime" /> to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotBe(System.Nullable{NodaTime.LocalDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotBe(System.Nullable{System.DateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is not equal to <paramref name="dateTime" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotBe(System.Nullable{System.DateTime},NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is not equal to <paramref name="dateTime" /> in <paramref name="calendar" />.
            </summary>
            <param name="dateTime">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="calendar">The <see cref="T:NodaTime.CalendarSystem" /> to convert <paramref name="dateTime" /> to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.BeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateTimeAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotBeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateTimeAssertions, LocalDate&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.LocalDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;LocalDateTimeAssertions, LocalTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.LocalTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.HaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> has the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.LocalDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.NotHaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalDateTime" /> does not have the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.LocalDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.BeGreaterThan(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.BeGreaterThanOrEqualTo(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.BeLessThan(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalDateTimeAssertions.BeLessThanOrEqualTo(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalDateTime" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.LocalTimeAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.LocalTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.#ctor(System.Nullable{NodaTime.LocalTime})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.LocalTimeAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.LocalTime" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.LocalTimeAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.Be(System.Nullable{NodaTime.LocalTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalTime" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotBe(System.Nullable{NodaTime.LocalTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalTime" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.HaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> has the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.LocalTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.NotHaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.LocalTime" /> does not have the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.LocalTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.BeGreaterThan(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalTime" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.BeGreaterThanOrEqualTo(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalTime" /> is on or after <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.BeLessThan(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalTime" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.LocalTimeAssertions.BeLessThanOrEqualTo(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.LocalTime" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.LocalTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;LocalTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.OffsetAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Offset" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.#ctor(System.Nullable{NodaTime.Offset})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.OffsetAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Offset" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.OffsetAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.Be(System.Nullable{NodaTime.Offset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.Be(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBe(System.Nullable{NodaTime.Offset},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBe(System.Nullable{System.TimeSpan},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BePositive(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is positive.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeNegative(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is negative.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeCloseTo(NodaTime.Offset,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeCloseTo(NodaTime.Offset,NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeCloseTo(NodaTime.Offset,System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotBeCloseTo(NodaTime.Offset,NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is not within <paramref name="precision" /> of <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="precision">The maximum amount of time which the two values may differ.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeGreaterThan(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is greater than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeGreaterThanOrEqualTo(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is greater than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeLessThan(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is less than <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.BeLessThanOrEqualTo(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Offset" /> is less than or equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Offset" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveSeconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveMilliseconds(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveNanoseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified nanoseconds.
            </summary>
            <param name="nanoseconds">
                The nanoseconds that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveNanoseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified nanoseconds.
            </summary>
            <param name="nanoseconds">
                The nanoseconds that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.HaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> has the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Offset" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetAssertions.NotHaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Offset" /> does not have the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Offset" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.OffsetDateAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.OffsetDate" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.#ctor(System.Nullable{NodaTime.OffsetDate})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.OffsetDateAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.OffsetDate" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.OffsetDateAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.Be(System.Nullable{NodaTime.OffsetDate},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.OffsetDate" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.OffsetDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotBe(System.Nullable{NodaTime.OffsetDate},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.OffsetDate" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.OffsetDate" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.BeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotBeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified <see cref="T:NodaTime.OffsetDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.OffsetDate" /> that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, OffsetDate&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified <see cref="T:NodaTime.OffsetDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.OffsetDate" /> that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.OffsetDate" /> that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, OffsetDate&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.OffsetDate" /> that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, OffsetDate&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.OffsetDate" /> that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.OffsetDate" /> that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.HaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> has the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.OffsetDate" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateAssertions.NotHaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDate" /> does not have the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.OffsetDate" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.OffsetDateTimeAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.OffsetDateTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.#ctor(System.Nullable{NodaTime.OffsetDateTime})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.OffsetDateTimeAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.OffsetDateTime" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.OffsetDateTimeAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.Be(System.Nullable{NodaTime.OffsetDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.OffsetDateTime" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.OffsetDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotBe(System.Nullable{NodaTime.OffsetDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.OffsetDateTime" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.OffsetDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.BeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotBeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified <see cref="T:NodaTime.OffsetDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, LocalDate&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified <see cref="T:NodaTime.OffsetDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveLocalDateTime(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">
                The <see cref="T:NodaTime.LocalDateTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, LocalDateTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveLocalDateTime(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDateTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.OffsetDateTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, OffsetDateTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetDateTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.OffsetDateTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, OffsetDateTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetDateTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.OffsetDateTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.OffsetDateTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified <see cref="T:NodaTime.OffsetTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetDateTimeAssertions, LocalTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified <see cref="T:NodaTime.OffsetTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.HaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> has the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.OffsetDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetDateTimeAssertions.NotHaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetDateTime" /> does not have the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.OffsetDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.OffsetTimeAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.OffsetTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.#ctor(System.Nullable{NodaTime.OffsetTime})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.OffsetTimeAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.OffsetTime" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.OffsetTimeAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.Be(System.Nullable{NodaTime.OffsetTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.OffsetTime" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.OffsetTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotBe(System.Nullable{NodaTime.OffsetTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.OffsetTime" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.OffsetTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.OffsetTime" /> that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetTimeAssertions, OffsetTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.OffsetTime" /> that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetTimeAssertions, OffsetTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.OffsetTime" /> that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.OffsetTime" /> that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;OffsetTimeAssertions, LocalTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.OffsetTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.HaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> has the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.OffsetTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.OffsetTimeAssertions.NotHaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.OffsetTime" /> does not have the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.OffsetTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;OffsetTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.PeriodAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.Period" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.#ctor(NodaTime.Period)">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.PeriodAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.Period" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.PeriodAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.Be(NodaTime.Period,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Period" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Period" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.Be(System.Nullable{NodaTime.Duration},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Period" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotBe(NodaTime.Period,System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Period" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Period" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotBe(System.Nullable{NodaTime.Duration},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Period" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.Duration" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.BeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Period" /> is zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotBeZero(System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.Period" /> is not zero.
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveSeconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveSeconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified seconds.
            </summary>
            <param name="seconds">
                The seconds that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified days.
            </summary>
            <param name="days">
                The days that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveDays(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified days.
            </summary>
            <param name="days">
                The days that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveMonths(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified months.
            </summary>
            <param name="months">
                The months that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveMonths(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified months.
            </summary>
            <param name="months">
                The months that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveWeeks(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified weeks.
            </summary>
            <param name="weeks">
                The weeks that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveWeeks(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified weeks.
            </summary>
            <param name="weeks">
                The weeks that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveYears(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified years.
            </summary>
            <param name="years">
                The years that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveYears(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified years.
            </summary>
            <param name="years">
                The years that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveMilliseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveMilliseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified milliseconds.
            </summary>
            <param name="milliseconds">
                The milliseconds that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveNanoseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified nanoseconds.
            </summary>
            <param name="nanoseconds">
                The nanoseconds that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveNanoseconds(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified nanoseconds.
            </summary>
            <param name="nanoseconds">
                The nanoseconds that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveMinutes(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified minutes.
            </summary>
            <param name="minutes">
                The minutes that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveMinutes(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified minutes.
            </summary>
            <param name="minutes">
                The minutes that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveTicks(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified ticks.
            </summary>
            <param name="ticks">
                The ticks that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveHours(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has the specified hours.
            </summary>
            <param name="hours">
                The hours that the current <see cref="T:NodaTime.Period" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveHours(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have the specified hours.
            </summary>
            <param name="hours">
                The hours that the current <see cref="T:NodaTime.Period" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveDateComponent(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has any non-zero date-based properties (days or higher).
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveDateComponent(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have any non-zero date-based properties (days or higher).
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.HaveTimeComponent(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> has any non-zero time-based properties (hours or lower).
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.PeriodAssertions.NotHaveTimeComponent(System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.Period" /> does not have any non-zero time-based properties (hours or lower).
            </summary>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;PeriodAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="T:FluentAssertions.NodaTime.ZonedDateTimeAssertions">
            <summary>
                Contains assertions for <see cref="T:NodaTime.ZonedDateTime" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.#ctor(System.Nullable{NodaTime.ZonedDateTime})">
            <summary>
                Initializes a new <see cref="T:FluentAssertions.NodaTime.ZonedDateTimeAssertions" />.
            </summary>
            <param name="subject">The <see cref="T:NodaTime.ZonedDateTime" /> that is being asserted.</param>
        </member>
        <member name="P:FluentAssertions.NodaTime.ZonedDateTimeAssertions.Identifier">
            <inheritdoc />
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.Be(System.Nullable{NodaTime.ZonedDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.ZonedDateTime" /> is equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.ZonedDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotBe(System.Nullable{NodaTime.ZonedDateTime},System.String,System.Object[])">
            <summary>
                Asserts that this <see cref="T:NodaTime.ZonedDateTime" /> is not equal to <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:NodaTime.ZonedDateTime" /> to compare to.</param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.BeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;ZonedDateTimeAssertions, CalendarSystem&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.CalendarSystem" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotBeInCalendar(NodaTime.CalendarSystem,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified <see cref="T:NodaTime.CalendarSystem" />.
            </summary>
            <param name="calendar">
                The <see cref="T:NodaTime.CalendarSystem" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;ZonedDateTimeAssertions, LocalDate&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.LocalDate" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveDate(NodaTime.LocalDate,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified <see cref="T:NodaTime.LocalDate" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDate" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;ZonedDateTimeAssertions, LocalTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.LocalTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveTimeOfDay(NodaTime.LocalTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified <see cref="T:NodaTime.LocalTime" />.
            </summary>
            <param name="timeOfDay">
                The <see cref="T:NodaTime.LocalTime" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveLocalDateTime(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="localDateTime">
                The <see cref="T:NodaTime.LocalDateTime" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;ZonedDateTimeAssertions, LocalDateTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.LocalDateTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveLocalDateTime(NodaTime.LocalDateTime,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified <see cref="T:NodaTime.LocalDateTime" />.
            </summary>
            <param name="date">
                The <see cref="T:NodaTime.LocalDateTime" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.Offset" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;ZonedDateTimeAssertions, ZonedDateTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.ZonedDateTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.Offset" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndWhichConstraint`2">AndWhichConstraint&lt;ZonedDateTimeAssertions, ZonedDateTime&gt;</see>
                which can be used to assert the <see cref="T:NodaTime.ZonedDateTime" />.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveOffset(NodaTime.Offset,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified <see cref="T:NodaTime.Offset" />.
            </summary>
            <param name="offset">
                The <see cref="T:NodaTime.Offset" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveOffset(System.TimeSpan,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="timeSpan">
                The <see cref="T:NodaTime.Offset" /> that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveClockHourOfHalfDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified hour of the half-day.
            </summary>
            <param name="clockHourOfHalfDay">
                The hour of the half-day that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveDay(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified day of the month.
            </summary>
            <param name="day">
                The day of the month that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveDayOfWeek(NodaTime.IsoDayOfWeek,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified day of the week.
            </summary>
            <param name="dayOfWeek">
                The day of the week that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveDayOfYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified day of the year.
            </summary>
            <param name="dayOfYear">
                The day of the year that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveHour(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified hour of the day.
            </summary>
            <param name="hourOfDay">
                The hour of the day that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveYear(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified year.
            </summary>
            <param name="year">
                The year that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified second.
            </summary>
            <param name="second">
                The second that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified month.
            </summary>
            <param name="month">
                The month that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified minute.
            </summary>
            <param name="minute">
                The minute that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveMillisecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified millisecond.
            </summary>
            <param name="millisecond">
                The millisecond that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveNanosecondsWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified nanoseconds within the day.
            </summary>
            <param name="nanosecondOfDay">
                The nanoseconds within the day that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveNanosecondsWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified nanoseconds within the second.
            </summary>
            <param name="nanosecondOfSecond">
                The nanoseconds within the second that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveTicksWithinSecond(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified tick of second.
            </summary>
            <param name="tickOfSecond">
                The tick of second that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveTicksWithinDay(System.Int64,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified tick of day.
            </summary>
            <param name="tickOfDay">
                The tick of day that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveYearWithinEra(System.Int32,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified year of era.
            </summary>
            <param name="yearOfEra">
                The year of era that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.HaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> has the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.ZonedDateTime" /> is expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
        <member name="M:FluentAssertions.NodaTime.ZonedDateTimeAssertions.NotHaveEra(NodaTime.Calendars.Era,System.String,System.Object[])">
            <summary>
                Asserts that the current <see cref="T:NodaTime.ZonedDateTime" /> does not have the specified era.
            </summary>
            <param name="era">
                The era that the current <see cref="T:NodaTime.ZonedDateTime" /> is not expected to have.
            </param>
            <param name="because">
                A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])" /> explaining why the assertion
                is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="becauseArgs">
                Zero or more objects to format using the placeholders in <paramref name="because" />.
            </param>
            <returns>
                An <see cref="T:FluentAssertions.AndConstraint`1">AndConstraint&lt;ZonedDateTimeAssertions&gt;</see> which can be used to chain assertions.
            </returns>
        </member>
    </members>
</doc>
